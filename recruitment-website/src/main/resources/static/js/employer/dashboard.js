function parseJwt(token) {
  if (!token) return null;
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
      atob(base64)
        .split('')
        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
        .join('')
    );
    return JSON.parse(jsonPayload);
  } catch (error) {
    console.error("L·ªói parse JWT:", error);
    return null;
  }
}

document.addEventListener("DOMContentLoaded", function() {
  const token = localStorage.getItem("idToken");
  console.log("Token l·∫•y t·ª´ localStorage:", token);

  if (!token) {
    alert("Vui l√≤ng ƒëƒÉng nh·∫≠p.");
    window.location.href = "/employer/login";
    return;
  }

  const payload = parseJwt(token);
  if (!payload || !payload.user_id) {
    alert("Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    return;
  }

  const jobsContainer = document.getElementById("recent-jobs");
  const totalJobElement = document.getElementById("totalJobs");
  const activeJobsElement = document.getElementById("activeJobs");
  const totalCandidatesElement = document.getElementById("totalCandidates");
  const paginationContainer = document.getElementById("pagination");

  // Check if required DOM elements exist
  if (!jobsContainer || !totalJobElement || !activeJobsElement || !totalCandidatesElement || !paginationContainer) {
    console.error("M·ªôt ho·∫∑c nhi·ªÅu ph·∫ßn t·ª≠ DOM kh√¥ng t·ªìn t·∫°i:", {
      jobsContainer: !!jobsContainer,
      totalJobElement: !!totalJobElement,
      activeJobsElement: !!activeJobsElement,
      totalCandidatesElement: !!totalCandidatesElement,
      paginationContainer: !!paginationContainer
    });
    alert("L·ªói giao di·ªán: M·ªôt s·ªë ph·∫ßn t·ª≠ kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.");
    return;
  }

  let currentPage = 1;
  const limit = 10; // s·ªë job tr√™n 1 trang

  function loadJobs(page) {
    fetch(`/api/employer/job/get?employerId=${payload.user_id}&page=${page}&limit=${limit}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      }
    })
      .then(response => {
        if (!response.ok) {
          return response.json().then(err => {
            throw new Error(err.message || "L·ªói khi t·∫£i d·ªØ li·ªáu tin tuy·ªÉn d·ª•ng");
          });
        }
        return response.json();
      })
      .then(data => {
        jobsContainer.innerHTML = ""; // X√≥a n·ªôi dung c≈©

        // Validate response data
        if (!data || typeof data !== 'object') {
          throw new Error("D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá");
        }

        // C·∫≠p nh·∫≠t s·ªë li·ªáu t·ªïng
        totalJobElement.textContent = data.totalCount || 0;

        // L·ªçc nh·ªØng job ƒëang m·ªü
        const activeJobs = data.jobs ? data.jobs.filter(job => job.status === "OPEN").length : 0;
        activeJobsElement.textContent = activeJobs;

        // T·ªïng s·ªë ·ª©ng vi√™n
        const totalCandidates = data.jobs ? data.jobs.reduce((sum, job) => sum + (job.applicationCount || 0), 0) : 0;
        totalCandidatesElement.textContent = totalCandidates;

        if (!data.jobs || data.jobs.length === 0) {
          jobsContainer.innerHTML = "<p>Ch∆∞a c√≥ tin tuy·ªÉn d·ª•ng n√†o.</p>";
          paginationContainer.innerHTML = "";
          return;
        }

        data.jobs.forEach(job => {
          const urgentTag = job.status === "URGENT" ? '<span style="background: #f59e0b; color: white;">‚ö° Kh√° g·∫•p</span>' : '';
          const jobCard = `
            <div class="job-card" id="job-${job.id}">
              <h3>${job.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"}</h3>
              <div class="job-meta">
                <span>üè¢ ${job.employer?.companyName || "Kh√¥ng x√°c ƒë·ªãnh"}</span>
                <span>üìç ${job.address || "Kh√¥ng x√°c ƒë·ªãnh"}</span>
                <span>üíº ${job.employmentType || "Kh√¥ng x√°c ƒë·ªãnh"}</span>
                <span>üí∞ ${job.salary || "Th·ªèa thu·∫≠n"}</span>
                ${urgentTag}
              </div>
              <div class="candidate-count">${job.applicationCount || 0} candidates applied</div>
              <div class="job-actions">
                <button class="btn btn-secondary" onclick="toggleJobDetail('${job.id}')">üë• View Details</button>
                <a href="/edit-job/${job.id}" class="btn">‚úèÔ∏è Edit</a>
              </div>
              <div class="job-detail" id="job-detail-${job.id}" style="display: none; margin-top: 10px; padding: 10px; background: #f9f9f9; border: 1px solid #ccc;">
                <p>ƒêang t·∫£i chi ti·∫øt...</p>
              </div>
            </div>
          `;
          jobsContainer.innerHTML += jobCard;
        });

        // T·∫°o controls ph√¢n trang
        const totalPages = data.totalPages || 1;
        currentPage = page;
        renderPaginationControls(currentPage, totalPages);
      })
      .catch(error => {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
        jobsContainer.innerHTML = `<p>L·ªói khi t·∫£i d·ªØ li·ªáu: ${error.message}</p>`;
        paginationContainer.innerHTML = "";
      });
  }

  function renderPaginationControls(current, total) {
    if (!paginationContainer) {
      console.error("paginationContainer kh√¥ng t·ªìn t·∫°i");
      return;
    }

    if (total <= 1) {
      paginationContainer.innerHTML = ""; // kh√¥ng c·∫ßn ph√¢n trang n·∫øu ch·ªâ 1 trang
      return;
    }

    let controlsHTML = "";

    if (current > 1) {
      controlsHTML += `<button id="prevPage" class="btn">Previous</button>`;
    } else {
      controlsHTML += `<button class="btn" disabled>Previous</button>`;
    }

    controlsHTML += ` <span>Page ${current} of ${total}</span> `;

    if (current < total) {
      controlsHTML += `<button id="nextPage" class="btn">Next</button>`;
    } else {
      controlsHTML += `<button class="btn" disabled>Next</button>`;
    }

    paginationContainer.innerHTML = controlsHTML;

    // G√°n s·ª± ki·ªán cho c√°c n√∫t
    if (current > 1) {
      const prevButton = document.getElementById("prevPage");
      if (prevButton) {
        prevButton.addEventListener("click", () => loadJobs(current - 1));
      }
    }
    if (current < total) {
      const nextButton = document.getElementById("nextPage");
      if (nextButton) {
        nextButton.addEventListener("click", () => loadJobs(current + 1));
      }
    }
  }

  // T·∫£i trang ƒë·∫ßu ti√™n khi v√†o
  loadJobs(currentPage);
});

function toggleJobDetail(jobId) {
  const detailDiv = document.getElementById(`job-detail-${jobId}`);
  const token = localStorage.getItem("idToken");

  if (!detailDiv) {
    console.error(`job-detail-${jobId} kh√¥ng t·ªìn t·∫°i`);
    return;
  }

  if (detailDiv.style.display === "none") {
    // Hi·ªán detail
    fetch(`/api/employer/job/detail/${jobId}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error("Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác");
      }
      return response.json();
    })
    .then(job => {
      detailDiv.innerHTML = `
        <h2>${job.title}</h2>
        <p><strong>C√¥ng ty:</strong> ${job.employer?.companyName || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
        <p><strong>ƒê·ªãa ch·ªâ:</strong> ${job.address || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
        <p><strong>Th√†nh ph·ªë:</strong> ${job.city || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
        <p><strong>Lo·∫°i h√¨nh c√¥ng vi·ªác:</strong> ${job.employmentType || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
        <p><strong>C·∫•p ƒë·ªô:</strong> ${job.jobLevel || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
        <p><strong>M·ª©c l∆∞∆°ng:</strong> ${job.salary || "Th·ªèa thu·∫≠n"}</p>
        <p><strong>Kinh nghi·ªám:</strong> ${job.experience || "Kh√¥ng y√™u c·∫ßu"}</p>
        <p><strong>Y√™u c·∫ßu:</strong> ${formatMultilineText(job.requirements)}</p>
        <p><strong>M√¥ t·∫£:</strong> ${formatMultilineText(job.description)}</p>
        <p><strong>Ph√∫c l·ª£i:</strong> ${
          Array.isArray(job.benefits)
            ? formatArrayText(job.benefits)
            : formatMultilineText(job.benefits)
          }
        </p>
        <p><strong>Th·ªùi gian l√†m vi·ªác:</strong> ${getWorkingHoursDisplayName(job.workingHours)}</p>
        <p><strong>S·ªë l∆∞·ª£ng tuy·ªÉn:</strong> ${job.numberOfVacancies || 1}</p>
        <p><strong>S·ªë l∆∞·ª£t ·ª©ng tuy·ªÉn:</strong> ${job.applicationCount || 0}</p>
        <p><strong>Ng√†y h·∫øt h·∫°n:</strong> ${job.deadline || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
        <p><strong>Ng√†y t·∫°o:</strong> ${job.createdAt ? new Date(job.createdAt).toLocaleString() : "Kh√¥ng r√µ"}</p>
        <p><strong>Ng√†y c·∫≠p nh·∫≠t:</strong> ${job.updatedAt ? new Date(job.updatedAt).toLocaleString() : "Kh√¥ng r√µ"}</p>
        <p><strong>Tr·∫°ng th√°i:</strong> ${job.status}</p>
        <p><strong>ƒê√£ duy·ªát:</strong> ${job.isApproved ? "ƒê√£ duy·ªát" : "Ch∆∞a duy·ªát"}</p>
        <button onclick="closeJobDetail('${jobId}')" style="margin-top: 10px;">ƒê√≥ng</button>
      `;
      detailDiv.style.display = "block";

      // Cu·ªôn m∆∞·ª£t xu·ªëng ph·∫ßn chi ti·∫øt
      detailDiv.scrollIntoView({ behavior: "smooth", block: "start" });
    })
    .catch(error => {
      detailDiv.innerHTML = `<p style="color:red;">L·ªói khi t·∫£i chi ti·∫øt: ${error.message}</p>`;
      detailDiv.style.display = "block";
    });
  } else {
    detailDiv.style.display = "none";
  }
}

function closeJobDetail(jobId) {
  const detailDiv = document.getElementById(`job-detail-${jobId}`);
  if (detailDiv) {
    detailDiv.style.display = "none";

    // Cu·ªôn m∆∞·ª£t v·ªÅ l·∫°i th·∫ª job-card
    const jobCard = document.getElementById(`job-${jobId}`);
    if (jobCard) {
      jobCard.scrollIntoView({ behavior: "smooth", block: "start" });
    }
  }
}

function getWorkingHoursDisplayName(value) {
  const map = {
    "EIGHTTOSEVENTEEN": "T·ª´ 8AM ƒë·∫øn 17PM",
    "NINETOEIGHTEEN": "T·ª´ 9AM ƒë·∫øn 18PM"
  };
  return map[value] || "Kh√¥ng x√°c ƒë·ªãnh";
}

function formatMultilineText(text) {
  if (!text) return "Kh√¥ng c√≥";
  return "<ul>" + text.split("\n").map(item => `<li>${item.trim()}</li>`).join("") + "</ul>";
}

function formatArrayText(arr) {
  if (!arr || arr.length === 0) return "Kh√¥ng c√≥";
  return "<ul>" + arr.map(item => `<li>${item}</li>`).join("") + "</ul>";
}